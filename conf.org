* Emacs customization in org mode


#+begin_src emacs-lisp
(message "Running tangled conf.org")
#+end_src

* tangle everything
#+PROPERTY: header-args :tangle yes

* Org mode fix
#+begin_src emacs-lisp
  ;; Install straight.el
  ;; (defvar bootstrap-version)
  ;; (let ((bootstrap-file
  ;;        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
  ;;       (bootstrap-version 5))
  ;;   (unless (file-exists-p bootstrap-file)
  ;;     (with-current-buffer
  ;;         (url-retrieve-synchronously
  ;;          "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
  ;;          'silent 'inhibit-cookies)
  ;;       (goto-char (point-max))
  ;;       (eval-print-last-sexp)))
  ;;   (load bootstrap-file nil 'nomessage))
  
  ;; ; Install org early before builtin version gets loaded
  ;; (straight-use-package  'org)
#+end_src

* Set up package manager and archives

#+begin_src emacs-lisp
  (message "Set up package")
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ;;("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")
			   ("org" . "http://orgmode.org/elpa/")
			   ))

  (package-initialize)

  (unless package-archive-contents (package-refresh-contents))
#+end_src

* Setup use-package
#+begin_src emacs-lisp
  (message "Set up use-package")
  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
      (package-install 'use-package))

  ;; use-package
  (require 'use-package)
  (setq use-package-always-ensure t)

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
#+end_src

* Basic customizations

#+begin_src emacs-lisp
  (message "Basic customizations")

  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (set-fringe-mode 10)
  (tool-bar-mode -1)
  (setq visible-bell t)
  (setq hl-line-mode 1)

  (recentf-mode 1) ;; give me a list of recently visited files
  ;; TODO make the list of files longer!
  
  (setq history-length 50) ;; remember 50 minibuffer entries
  (savehist-mode 1) ;; save my minibuffer history
  (save-place-mode 1) ;; go back to previous location in files
  (global-auto-revert-mode 1) ;; track changes on disk
#+end_src

* Dont pollute the init.el with custom variabels at the end of the file
#+begin_src emacs-lisp
  (message "Set up separate custom var file")
  ;; Keep all the custom var separate
    (setq custom-file (locate-user-emacs-file "custom-vars.el"))
    (load custom-file 'noerror 'nomessage)
#+end_src

* Theme
#+begin_src emacs-lisp
    (set-frame-font "JetBrains Mono 13" nil t)

      (setq doom-font (font-spec :family "JetBrains Mono" :size 13)
	    doom-variable-pitch-font (font-spec :family "sans" :size 14))
	;; Pick a doom theme here
	(message "loading doom theme")
	(use-package all-the-icons)

	(use-package doom-themes
	  :ensure t
	  :config
	  ;; Global settings (defaults)
	  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
		doom-themes-enable-italic t) ; if nil, italics is universally disabled

	  (setq doom-theme 'doom-dark+
		doom-font (font-spec :family "JetBrains Mono" :size 13))
	  ;; jetbrains font
	  ;;(setq doom-font (font-spec :family "JetBrains Mono" :size 13))
	  ;;

	  ;;(load-theme 'doom-ayu-dark t)
	  ;;

	  ;; Enable flashing mode-line on errors
	  (doom-themes-visual-bell-config)
	  ;; Enable custom neotree theme (all-the-icons must be installed!)
	  ;;(doom-themes-neotree-config)
	  ;; or for treemacs users
	  ;;(setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
	  ;;(doom-themes-treemacs-config)
	  ;; Corrects (and improves) org-mode's native fontification.
	  (doom-themes-org-config))

  ;; adapted from system crafters presentations
  ;; NOTE: These settings might not be ideal for your machine, tweak them as needed!
  ;;(set-face-attribute 'default nil :font "JetBrains Mono");; :weight 'light);; :height 180)
  ;;(set-face-attribute 'fixed-pitch nil :font "JetBrains Mono");; :weight);; 'light :height 190)

  (set-face-attribute 'font-lock-comment-face nil  :slant 'italic)
  (set-face-attribute 'font-lock-function-name-face nil  :slant 'italic)
  (set-face-attribute 'font-lock-variable-name-face nil  :slant 'italic)

	(use-package doom-modeline
	  :init (doom-modeline-mode 1)
	  :custom ((doom-modeline-height 15)))
#+end_src

* Modus vivendi

#+begin_src emacs-lisp
  ;;   ;;; For packaged versions which must use `require':
  ;; (use-package modus-themes
  ;;   :ensure
  ;;   :init
  ;;   ;; Add all your customizations prior to loading the themes
  ;;   (setq modus-themes-italic-constructs t
  ;; 	modus-themes-bold-constructs nil
  ;; 	modus-themes-region '(bg-only no-extend))

  ;;   ;; Load the theme files before enabling a theme
  ;;   (modus-themes-load-themes)
  ;;   :config
  ;;   ;; Load the theme of your choice:
  ;;   ;;(modus-themes-load-operandi) ;; OR
  ;;   (modus-themes-load-vivendi)
  ;;   :bind ("<f5>" . modus-themes-toggle))
#+end_src

* ef-themes

#+begin_src emacs-lisp
    ;; Make customisations that affect Emacs faces BEFORE loading a theme
    ;; (any change needs a theme re-load to take effect).
    (require 'ef-themes)

    ;; If you like two specific themes and want to switch between them, you
    ;; can specify them in `ef-themes-to-toggle' and then invoke the command
    ;; `ef-themes-toggle'.  All the themes are included in the variable
    ;; `ef-themes-collection'.
    ;; (setq ef-themes-to-toggle '(ef-summer ef-winter))

   (setq ef-themes-headings ; read the manual's entry or the doc string
	  '((0 variable-pitch light 1.4)
	    (1 variable-pitch regular 1.4)
	    (2 variable-pitch regular 1.3)
	    (3 variable-pitch regular 1.3)
	    (4 variable-pitch regular 1.3)
	    (5 variable-pitch 1.3) ; absence of weight means `bold'
	    (6 variable-pitch 1.3)
	    (7 variable-pitch 1.2)
	    (t variable-pitch 1.1)))

    ;; ;; They are nil by default...

    ;; set to non-nil to force fixed-pitch

    ;;(setq ef-themes-mixed-fonts t)
    ;;       ef-themes-variable-pitch-ui t)

    ;; ;; Read the doc string or manual for this one.  The symbols can be
    ;; ;; combined in any order.
    ;; (setq ef-themes-region '(intense no-extend neutral))

    ;; Disable all other themes to avoid awkward blending:
    ;;(mapc #'disable-theme custom-enabled-themes)

    ;; Load the theme of choice:
    (load-theme 'ef-autumn :no-confirm)	

    ;; OR use this to load the theme which also calls `ef-themes-post-load-hook':
    ;;(ef-themes-select 'ef-autumn)

    ;; The themes we provide are recorded in the `ef-themes-dark-themes',
    ;; `ef-themes-light-themes'.

    ;; We also provide these commands, but do not assign them to any key:
    ;;
    ;; - `ef-themes-toggle'
    ;; - `ef-themes-select'
    ;; - `ef-themes-select-dark'
    ;; - `ef-themes-select-light'
    ;; - `ef-themes-load-random'
    ;; - `ef-themes-preview-colors'
    ;; - `ef-themes-preview-colors-current'


#+end_src

#+RESULTS:
: ef-themes



* Line numbering
#+begin_src emacs-lisp

  (message "Set up line numbering")
    ;; Line numbering
    (column-number-mode)
    (global-display-line-numbers-mode t)

    ;; Disable line numbers for some modes
    (dolist (mode '(org-mode-hook
		    term-mode-hook
		    shell-mode-hook
		    vterm-mode-hook
		    treemacs-mode-hook
		    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

#+RESULTS:

* Ligatures
#+begin_src emacs-lisp
  (use-package ligature
  :config
  ;; Enable the "www" ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))
  ;; Enable traditional ligature support in eww-mode, if the
  ;; `variable-pitch' face supports it
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  ;; Enable all Cascadia Code ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                       "\\\\" "://"))
  ;; Enables ligature checks globally in all buffers.  You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))

#+end_src

* org mode
#+begin_src emacs-lisp
  (message "set up org-mode")

  (use-package org
    :mode (("\\.org$" . org-mode))
    :ensure org-plus-contrib
    :config
    :straight (:type built-in)
    ;;(progn
      ;; config stuff
    )

  ;; don't display images at full size
  (setq org-image-actual-width nil)

  ;; Nice bullets for org
    (use-package org-superstar
	:config
	(setq org-superstar-special-todo-items t)
	(add-hook 'org-mode-hook (lambda ()
				   (org-superstar-mode 1))))


#+end_src


* enable shift selection of regions

#+begin_src emacs-lisp
  (setq org-support-shift-select t)
#+end_src

* org roam
#+begin_src emacs-lisp
  ;; org roam

  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/Documents/repos/roam")
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert))
	   :config
	   (org-roam-setup))

#+end_src

* org tempo

Set up shortcuts for code blocks
- emacs-lisp
- python

#+begin_src emacs-lisp 
  (require 'org-tempo)

  (tempo-define-template "inline-elisp" ; just some name for the template
	       '("#+begin_src emacs-lisp" n p n
		 "#+end_src" n)
	       "<el"
	       "Insert emacs-lisp code block" ; documentation
	       'org-tempo-tags)

   (tempo-define-template "inline-python" ; just some name for the template
			  '("#+begin_src python" n p n
		 "#+end_src" n)
	       "<py"
	       "Insert python code block" ; documentation
	       'org-tempo-tags)
  
     (tempo-define-template "inline-scheme" ; just some name for the template
			  '("#+begin_src scheme" n p n
		 "#+end_src" n)
	       "<sc"
	       "Insert scheme code block" ; documentation
	       'org-tempo-tags) 
#+end_src

* Conda integration
#+begin_src emacs-lisp
  (message "Loading conda integration")
  (use-package conda
    :ensure t
    :init
    (setq conda-anaconda-home (expand-file-name "~/miniconda3"))
    (setq conda-env-home-directory (expand-file-name "~/miniconda3")))

  ;;get current environment--from environment variable CONDA_DEFAULT_ENV
  (conda-env-activate (getenv "CONDA_DEFAULT_ENV"))
  ;;(conda-env-autoactivate-mode t)
  ;;


#+end_src


* Eglot
#+begin_src emacs-lisp

(use-package eglot
  :ensure t)

#+end_src

#+begin_src emacs-lisp
  (message "set modeline for conda")
  (setq-default mode-line-format (cons (format "(%s)" conda-env-current-name)  mode-line-format))
#+end_src

* C++ development
- lsp-mode
- projectile
- company-bpx
- lsp-ivy

** Projectile

#+begin_src emacs-lisp
  ;; (use-package projectile
  ;;   :diminish projectile-mode
  ;;   :config (projectile-mode)
  ;;   :custom ((projectile-completion-system 'ivy))
  ;;   :bind-keymap
  ;;   ("C-c p" . projectile-command-map)
  ;;   :init
  ;;   ;; NOTE: Set this to the folder where you keep your Git repos!
  ;;   (when (file-directory-p "~/code")
  ;;     (setq projectile-project-search-path '("~/code")))
  ;;   (setq projectile-switch-project-action #'projectile-dired))

  ;; (use-package counsel-projectile
  ;;   :config (counsel-projectile-mode))
#+end_src


** LSP
from https://emacs-lsp.github.io/lsp-mode/tutorials/CPP-guide/

#+begin_src emacs-lisp

	  (require 'package)
	  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
	  ;; (package-initialize)

	  (setq package-selected-packages '(lsp-mode yasnippet lsp-treemacs helm-lsp
						     ;;projectile
						     hydra flycheck company

						     avy which-key helm-xref dap-mode))

	  (when (cl-find-if-not #'package-installed-p package-selected-packages)
	    (package-refresh-contents)
	    (mapc #'package-install package-selected-packages))

	  ;; ;; sample `helm' configuration use https://github.com/emacs-helm/helm/ for details
	  ;; (helm-mode)
	  ;; (require 'helm-xref)
	  ;; (define-key global-map [remap find-file] #'helm-find-files)
	  ;; (define-key global-map [remap execute-extended-command] #'helm-M-x)
	  ;; (define-key global-map [remap switch-to-buffer] #'helm-mini)

	  (which-key-mode)
	  (add-hook 'c-mode-hook 'lsp)
	  (add-hook 'c++-mode-hook 'lsp)

	  (setq gc-cons-threshold (* 100 1024 1024)
		read-process-output-max (* 1024 1024)
		treemacs-space-between-root-nodes nil
		company-idle-delay 0.0
		company-minimum-prefix-length 1
		lsp-idle-delay 0.1)  ;; clangd is fast

	  (with-eval-after-load 'lsp-mode
	    (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
	    (require 'dap-cpptools)
	    (yas-global-mode))


	    ;; (defun efs/lsp-mode-setup ()
	    ;;   (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
	    ;;   (lsp-headerline-breadcrumb-mode))

	    ;; (use-package lsp-mode
	    ;;   :commands (lsp lsp-deferred)
	    ;;   :hook (lsp-mode . efs/lsp-mode-setup)
	    ;;   :init
	    ;;   (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
	    ;;   :config
	    ;;   (lsp-enable-which-key-integration t))

#+end_src

* Git gutter

#+begin_src emacs-lisp
    (use-package git-gutter
    :hook (prog-mode . git-gutter-mode)
    :config
    (setq git-gutter:update-interval 0.02))

  (use-package git-gutter-fringe
    :config
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))

  

#+end_src

* indent highlights

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)

  ;;(set-face-background 'highlight-indent-guides-odd-face "darkgray")
  ;;(set-face-background 'highlight-indent-guides-even-face "dimgray")
  ;;(set-face-foreground 'highlight-indent-guides-character-face "darkgray")

  (setq highlight-highlight-indent-guides-method "character")
  (setq highlight-indent-guides-responsive "top")
#+end_src


* Add racket to org mode
#+begin_src elisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((scheme . t)
       ;;(racket . t)
       ))

#+end_src

#+RESULTS:

* Don't ask to eval org babel code blocks

#+begin_src elisp
    (defun my-org-confirm-babel-evaluate (lang body)
      (not (or (string= lang "python")
	       (string= lang "elisp")
	       (string= lang "scheme")
	       )
	   )
      )

  (setq org-confirm-babel-evaluate #'my-org-confirm-babel-evaluate)
#+end_src


* Recent files shortcut 
#+begin_src emacs-lisp
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 40)
  (global-set-key (kbd "C-x r") 'recentf-open-files)

  (setq initial-buffer-choice #'recentf-open-files)
#+end_src

* python code formatting

#+begin_src elisp
  (require 'python-isort)
  (add-hook 'python-mode-hook 'python-isort-on-save-mode)
  (add-hook 'python-mode-hook 'blacken-mode)
  (setq blacken-line-length 100)


#+end_src

#+RESULTS:
: 100

* fci mode for code
#+begin_src elisp
  (require 'fill-column-indicator) 
  (setq fci-rule-width 1)
  (setq fci-rule-color "gray")

  (add-hook 'python-mode-hook 'fci-mode)
  (add-hook 'c-mode-hook 'fci-mode)

#+end_src

#+RESULTS:
| fci-mode | lsp | macrostep-c-mode-hook |


* Tramp

copied from:
https://github.com/doomemacs/doomemacs/issues/3909

#+begin_src
(after! tramp
  (setq tramp-inline-compress-start-size 1000)
  (setq tramp-copy-size-limit 10000)
  (setq vc-handled-backends '(Git))
  (setq tramp-verbose 1)
  (setq tramp-default-method "scp")
  (setq tramp-use-ssh-controlmaster-options nil)
  (setq projectile--mode-line "Projectile")
  (setq tramp-verbose 1))
#+end_src

#+RESULTS:
| python-isort-on-save-mode | yasnippet-snippets--fixed-indent | elpy-mode | doom-modeline-env-setup-python |


  ,#+begin_src emacs-lisp
	(message "end of conf.org")
#+end_src






